//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Antlr4Source\UserAgentTreeWalker.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace OrbintSoft.Yauaa.Antlr4Source {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class UserAgentTreeWalkerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, PATHTOKENNAME=9, 
		VALUENAME=10, VALUE=11, UP=12, NEXT=13, NEXT2=14, NEXT3=15, NEXT4=16, 
		PREV=17, PREV2=18, PREV3=19, PREV4=20, DOT=21, MINUS=22, STAR=23, IN=24, 
		NUMBER=25, BLOCKOPEN=26, BLOCKCLOSE=27, BRACEOPEN=28, BRACECLOSE=29, DOUBLEQUOTE=30, 
		COLON=31, SEMICOLON=32, SPACE=33, NOTEQUALS=34, EQUALS=35, CONTAINS=36, 
		STARTSWITH=37, ENDSWITH=38, BACKTOFULL=39;
	public const int
		RULE_matcherRequire = 0, RULE_matcherExtract = 1, RULE_matcherVariable = 2, 
		RULE_matcher = 3, RULE_basePath = 4, RULE_path = 5, RULE_numberRange = 6, 
		RULE_wordRange = 7;
	public static readonly string[] ruleNames = {
		"matcherRequire", "matcherExtract", "matcherVariable", "matcher", "basePath", 
		"path", "numberRange", "wordRange"
	};

	private static readonly string[] _LiteralNames = {
		null, "'IsNull'", "'Concat'", "'NormalizeBrand'", "'CleanVersion'", "'LookUp'", 
		"'LookUpPrefix'", "'IsInLookUpPrefix'", "'agent'", null, null, null, "'^'", 
		"'>'", "'>>'", "'>>>'", "'>>>>'", "'<'", "'<<'", "'<<<'", "'<<<<'", "'.'", 
		"'-'", "'*'", "'?'", null, "'['", "']'", "'('", "')'", "'\"'", "':'", 
		"';'", null, "'!='", "'='", "'~'", "'{'", "'}'", "'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "PATHTOKENNAME", 
		"VALUENAME", "VALUE", "UP", "NEXT", "NEXT2", "NEXT3", "NEXT4", "PREV", 
		"PREV2", "PREV3", "PREV4", "DOT", "MINUS", "STAR", "IN", "NUMBER", "BLOCKOPEN", 
		"BLOCKCLOSE", "BRACEOPEN", "BRACECLOSE", "DOUBLEQUOTE", "COLON", "SEMICOLON", 
		"SPACE", "NOTEQUALS", "EQUALS", "CONTAINS", "STARTSWITH", "ENDSWITH", 
		"BACKTOFULL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "UserAgentTreeWalker.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static UserAgentTreeWalkerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public UserAgentTreeWalkerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public UserAgentTreeWalkerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MatcherRequireContext : ParserRuleContext {
		public MatcherRequireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matcherRequire; } }
	 
		public MatcherRequireContext() { }
		public virtual void CopyFrom(MatcherRequireContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MatcherBaseContext : MatcherRequireContext {
		public MatcherContext matcher() {
			return GetRuleContext<MatcherContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(UserAgentTreeWalkerParser.Eof, 0); }
		public MatcherBaseContext(MatcherRequireContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherBase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherBase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatcherPathIsNullContext : MatcherRequireContext {
		public ITerminalNode BLOCKOPEN() { return GetToken(UserAgentTreeWalkerParser.BLOCKOPEN, 0); }
		public MatcherContext matcher() {
			return GetRuleContext<MatcherContext>(0);
		}
		public ITerminalNode BLOCKCLOSE() { return GetToken(UserAgentTreeWalkerParser.BLOCKCLOSE, 0); }
		public ITerminalNode Eof() { return GetToken(UserAgentTreeWalkerParser.Eof, 0); }
		public MatcherPathIsNullContext(MatcherRequireContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherPathIsNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherPathIsNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherPathIsNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatcherRequireContext matcherRequire() {
		MatcherRequireContext _localctx = new MatcherRequireContext(Context, State);
		EnterRule(_localctx, 0, RULE_matcherRequire);
		try {
			State = 25;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case VALUE:
			case BACKTOFULL:
				_localctx = new MatcherBaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 16; matcher(0);
				State = 17; Match(Eof);
				}
				break;
			case T__0:
				_localctx = new MatcherPathIsNullContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 19; Match(T__0);
				State = 20; Match(BLOCKOPEN);
				State = 21; matcher(0);
				State = 22; Match(BLOCKCLOSE);
				State = 23; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatcherExtractContext : ParserRuleContext {
		public MatcherContext expression;
		public ITerminalNode Eof() { return GetToken(UserAgentTreeWalkerParser.Eof, 0); }
		public MatcherContext matcher() {
			return GetRuleContext<MatcherContext>(0);
		}
		public MatcherExtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matcherExtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherExtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherExtract(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherExtract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatcherExtractContext matcherExtract() {
		MatcherExtractContext _localctx = new MatcherExtractContext(Context, State);
		EnterRule(_localctx, 2, RULE_matcherExtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; _localctx.expression = matcher(0);
			State = 28; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatcherVariableContext : ParserRuleContext {
		public MatcherContext expression;
		public ITerminalNode Eof() { return GetToken(UserAgentTreeWalkerParser.Eof, 0); }
		public MatcherContext matcher() {
			return GetRuleContext<MatcherContext>(0);
		}
		public MatcherVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matcherVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatcherVariableContext matcherVariable() {
		MatcherVariableContext _localctx = new MatcherVariableContext(Context, State);
		EnterRule(_localctx, 4, RULE_matcherVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; _localctx.expression = matcher(0);
			State = 31; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatcherContext : ParserRuleContext {
		public MatcherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matcher; } }
	 
		public MatcherContext() { }
		public virtual void CopyFrom(MatcherContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MatcherCleanVersionContext : MatcherContext {
		public ITerminalNode BLOCKOPEN() { return GetToken(UserAgentTreeWalkerParser.BLOCKOPEN, 0); }
		public MatcherContext matcher() {
			return GetRuleContext<MatcherContext>(0);
		}
		public ITerminalNode BLOCKCLOSE() { return GetToken(UserAgentTreeWalkerParser.BLOCKCLOSE, 0); }
		public MatcherCleanVersionContext(MatcherContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherCleanVersion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherCleanVersion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherCleanVersion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatcherPathLookupPrefixContext : MatcherContext {
		public IToken lookup;
		public IToken defaultValue;
		public ITerminalNode BLOCKOPEN() { return GetToken(UserAgentTreeWalkerParser.BLOCKOPEN, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(UserAgentTreeWalkerParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(UserAgentTreeWalkerParser.SEMICOLON, i);
		}
		public MatcherContext matcher() {
			return GetRuleContext<MatcherContext>(0);
		}
		public ITerminalNode BLOCKCLOSE() { return GetToken(UserAgentTreeWalkerParser.BLOCKCLOSE, 0); }
		public ITerminalNode VALUENAME() { return GetToken(UserAgentTreeWalkerParser.VALUENAME, 0); }
		public ITerminalNode VALUE() { return GetToken(UserAgentTreeWalkerParser.VALUE, 0); }
		public MatcherPathLookupPrefixContext(MatcherContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherPathLookupPrefix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherPathLookupPrefix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherPathLookupPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatcherConcatPrefixContext : MatcherContext {
		public IToken prefix;
		public ITerminalNode BLOCKOPEN() { return GetToken(UserAgentTreeWalkerParser.BLOCKOPEN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(UserAgentTreeWalkerParser.SEMICOLON, 0); }
		public MatcherContext matcher() {
			return GetRuleContext<MatcherContext>(0);
		}
		public ITerminalNode BLOCKCLOSE() { return GetToken(UserAgentTreeWalkerParser.BLOCKCLOSE, 0); }
		public ITerminalNode VALUE() { return GetToken(UserAgentTreeWalkerParser.VALUE, 0); }
		public MatcherConcatPrefixContext(MatcherContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherConcatPrefix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherConcatPrefix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherConcatPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatcherPathLookupContext : MatcherContext {
		public IToken lookup;
		public IToken defaultValue;
		public ITerminalNode BLOCKOPEN() { return GetToken(UserAgentTreeWalkerParser.BLOCKOPEN, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(UserAgentTreeWalkerParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(UserAgentTreeWalkerParser.SEMICOLON, i);
		}
		public MatcherContext matcher() {
			return GetRuleContext<MatcherContext>(0);
		}
		public ITerminalNode BLOCKCLOSE() { return GetToken(UserAgentTreeWalkerParser.BLOCKCLOSE, 0); }
		public ITerminalNode VALUENAME() { return GetToken(UserAgentTreeWalkerParser.VALUENAME, 0); }
		public ITerminalNode VALUE() { return GetToken(UserAgentTreeWalkerParser.VALUE, 0); }
		public MatcherPathLookupContext(MatcherContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherPathLookup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherPathLookup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherPathLookup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatcherWordRangeContext : MatcherContext {
		public MatcherContext matcher() {
			return GetRuleContext<MatcherContext>(0);
		}
		public WordRangeContext wordRange() {
			return GetRuleContext<WordRangeContext>(0);
		}
		public MatcherWordRangeContext(MatcherContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherWordRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherWordRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherWordRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatcherNormalizeBrandContext : MatcherContext {
		public ITerminalNode BLOCKOPEN() { return GetToken(UserAgentTreeWalkerParser.BLOCKOPEN, 0); }
		public MatcherContext matcher() {
			return GetRuleContext<MatcherContext>(0);
		}
		public ITerminalNode BLOCKCLOSE() { return GetToken(UserAgentTreeWalkerParser.BLOCKCLOSE, 0); }
		public MatcherNormalizeBrandContext(MatcherContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherNormalizeBrand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherNormalizeBrand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherNormalizeBrand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatcherConcatContext : MatcherContext {
		public IToken prefix;
		public IToken postfix;
		public ITerminalNode BLOCKOPEN() { return GetToken(UserAgentTreeWalkerParser.BLOCKOPEN, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(UserAgentTreeWalkerParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(UserAgentTreeWalkerParser.SEMICOLON, i);
		}
		public MatcherContext matcher() {
			return GetRuleContext<MatcherContext>(0);
		}
		public ITerminalNode BLOCKCLOSE() { return GetToken(UserAgentTreeWalkerParser.BLOCKCLOSE, 0); }
		public ITerminalNode[] VALUE() { return GetTokens(UserAgentTreeWalkerParser.VALUE); }
		public ITerminalNode VALUE(int i) {
			return GetToken(UserAgentTreeWalkerParser.VALUE, i);
		}
		public MatcherConcatContext(MatcherContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherConcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherConcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherConcat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatcherConcatPostfixContext : MatcherContext {
		public IToken postfix;
		public ITerminalNode BLOCKOPEN() { return GetToken(UserAgentTreeWalkerParser.BLOCKOPEN, 0); }
		public MatcherContext matcher() {
			return GetRuleContext<MatcherContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(UserAgentTreeWalkerParser.SEMICOLON, 0); }
		public ITerminalNode BLOCKCLOSE() { return GetToken(UserAgentTreeWalkerParser.BLOCKCLOSE, 0); }
		public ITerminalNode VALUE() { return GetToken(UserAgentTreeWalkerParser.VALUE, 0); }
		public MatcherConcatPostfixContext(MatcherContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherConcatPostfix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherConcatPostfix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherConcatPostfix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatcherPathIsInLookupPrefixContext : MatcherContext {
		public IToken lookup;
		public ITerminalNode BLOCKOPEN() { return GetToken(UserAgentTreeWalkerParser.BLOCKOPEN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(UserAgentTreeWalkerParser.SEMICOLON, 0); }
		public MatcherContext matcher() {
			return GetRuleContext<MatcherContext>(0);
		}
		public ITerminalNode BLOCKCLOSE() { return GetToken(UserAgentTreeWalkerParser.BLOCKCLOSE, 0); }
		public ITerminalNode VALUENAME() { return GetToken(UserAgentTreeWalkerParser.VALUENAME, 0); }
		public MatcherPathIsInLookupPrefixContext(MatcherContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherPathIsInLookupPrefix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherPathIsInLookupPrefix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherPathIsInLookupPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatcherPathContext : MatcherContext {
		public BasePathContext basePath() {
			return GetRuleContext<BasePathContext>(0);
		}
		public MatcherPathContext(MatcherContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterMatcherPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitMatcherPath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatcherPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatcherContext matcher() {
		return matcher(0);
	}

	private MatcherContext matcher(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MatcherContext _localctx = new MatcherContext(Context, _parentState);
		MatcherContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_matcher, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new MatcherPathContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 34; basePath();
				}
				break;
			case 2:
				{
				_localctx = new MatcherConcatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 35; Match(T__1);
				State = 36; Match(BLOCKOPEN);
				State = 37; ((MatcherConcatContext)_localctx).prefix = Match(VALUE);
				State = 38; Match(SEMICOLON);
				State = 39; matcher(0);
				State = 40; Match(SEMICOLON);
				State = 41; ((MatcherConcatContext)_localctx).postfix = Match(VALUE);
				State = 42; Match(BLOCKCLOSE);
				}
				break;
			case 3:
				{
				_localctx = new MatcherConcatPrefixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 44; Match(T__1);
				State = 45; Match(BLOCKOPEN);
				State = 46; ((MatcherConcatPrefixContext)_localctx).prefix = Match(VALUE);
				State = 47; Match(SEMICOLON);
				State = 48; matcher(0);
				State = 49; Match(BLOCKCLOSE);
				}
				break;
			case 4:
				{
				_localctx = new MatcherConcatPostfixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 51; Match(T__1);
				State = 52; Match(BLOCKOPEN);
				State = 53; matcher(0);
				State = 54; Match(SEMICOLON);
				State = 55; ((MatcherConcatPostfixContext)_localctx).postfix = Match(VALUE);
				State = 56; Match(BLOCKCLOSE);
				}
				break;
			case 5:
				{
				_localctx = new MatcherNormalizeBrandContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 58; Match(T__2);
				State = 59; Match(BLOCKOPEN);
				State = 60; matcher(0);
				State = 61; Match(BLOCKCLOSE);
				}
				break;
			case 6:
				{
				_localctx = new MatcherCleanVersionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 63; Match(T__3);
				State = 64; Match(BLOCKOPEN);
				State = 65; matcher(0);
				State = 66; Match(BLOCKCLOSE);
				}
				break;
			case 7:
				{
				_localctx = new MatcherPathLookupContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 68; Match(T__4);
				State = 69; Match(BLOCKOPEN);
				State = 70; ((MatcherPathLookupContext)_localctx).lookup = Match(VALUENAME);
				State = 71; Match(SEMICOLON);
				State = 72; matcher(0);
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 73; Match(SEMICOLON);
					State = 74; ((MatcherPathLookupContext)_localctx).defaultValue = Match(VALUE);
					}
				}

				State = 77; Match(BLOCKCLOSE);
				}
				break;
			case 8:
				{
				_localctx = new MatcherPathLookupPrefixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 79; Match(T__5);
				State = 80; Match(BLOCKOPEN);
				State = 81; ((MatcherPathLookupPrefixContext)_localctx).lookup = Match(VALUENAME);
				State = 82; Match(SEMICOLON);
				State = 83; matcher(0);
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 84; Match(SEMICOLON);
					State = 85; ((MatcherPathLookupPrefixContext)_localctx).defaultValue = Match(VALUE);
					}
				}

				State = 88; Match(BLOCKCLOSE);
				}
				break;
			case 9:
				{
				_localctx = new MatcherPathIsInLookupPrefixContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 90; Match(T__6);
				State = 91; Match(BLOCKOPEN);
				State = 92; ((MatcherPathIsInLookupPrefixContext)_localctx).lookup = Match(VALUENAME);
				State = 93; Match(SEMICOLON);
				State = 94; matcher(0);
				State = 95; Match(BLOCKCLOSE);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 103;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MatcherWordRangeContext(new MatcherContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_matcher);
					State = 99;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 100; wordRange();
					}
					} 
				}
				State = 105;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BasePathContext : ParserRuleContext {
		public BasePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basePath; } }
	 
		public BasePathContext() { }
		public virtual void CopyFrom(BasePathContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PathVariableContext : BasePathContext {
		public IToken variable;
		public PathContext nextStep;
		public ITerminalNode BACKTOFULL() { return GetToken(UserAgentTreeWalkerParser.BACKTOFULL, 0); }
		public ITerminalNode VALUENAME() { return GetToken(UserAgentTreeWalkerParser.VALUENAME, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public PathVariableContext(BasePathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterPathVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitPathVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PathWalkContext : BasePathContext {
		public PathContext nextStep;
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public PathWalkContext(BasePathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterPathWalk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitPathWalk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathWalk(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PathFixedValueContext : BasePathContext {
		public IToken value;
		public ITerminalNode VALUE() { return GetToken(UserAgentTreeWalkerParser.VALUE, 0); }
		public PathFixedValueContext(BasePathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterPathFixedValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitPathFixedValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPathFixedValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasePathContext basePath() {
		BasePathContext _localctx = new BasePathContext(Context, State);
		EnterRule(_localctx, 8, RULE_basePath);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUE:
				_localctx = new PathFixedValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 106; ((PathFixedValueContext)_localctx).value = Match(VALUE);
				}
				break;
			case BACKTOFULL:
				_localctx = new PathVariableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 107; Match(BACKTOFULL);
				State = 108; ((PathVariableContext)_localctx).variable = Match(VALUENAME);
				State = 110;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 109; ((PathVariableContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case T__7:
				_localctx = new PathWalkContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; Match(T__7);
				State = 114;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 113; ((PathWalkContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
	 
		public PathContext() { }
		public virtual void CopyFrom(PathContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StepNext4Context : PathContext {
		public PathContext nextStep;
		public ITerminalNode NEXT4() { return GetToken(UserAgentTreeWalkerParser.NEXT4, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepNext4Context(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepNext4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepNext4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepNext4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepStartsWithValueContext : PathContext {
		public IToken value;
		public PathContext nextStep;
		public ITerminalNode STARTSWITH() { return GetToken(UserAgentTreeWalkerParser.STARTSWITH, 0); }
		public ITerminalNode VALUE() { return GetToken(UserAgentTreeWalkerParser.VALUE, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepStartsWithValueContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepStartsWithValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepStartsWithValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepStartsWithValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepNext3Context : PathContext {
		public PathContext nextStep;
		public ITerminalNode NEXT3() { return GetToken(UserAgentTreeWalkerParser.NEXT3, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepNext3Context(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepNext3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepNext3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepNext3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepPrev4Context : PathContext {
		public PathContext nextStep;
		public ITerminalNode PREV4() { return GetToken(UserAgentTreeWalkerParser.PREV4, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepPrev4Context(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepPrev4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepPrev4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepPrev4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepPrev3Context : PathContext {
		public PathContext nextStep;
		public ITerminalNode PREV3() { return GetToken(UserAgentTreeWalkerParser.PREV3, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepPrev3Context(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepPrev3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepPrev3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepPrev3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepPrev2Context : PathContext {
		public PathContext nextStep;
		public ITerminalNode PREV2() { return GetToken(UserAgentTreeWalkerParser.PREV2, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepPrev2Context(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepPrev2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepPrev2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepPrev2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepIsInSetContext : PathContext {
		public IToken set;
		public PathContext nextStep;
		public ITerminalNode IN() { return GetToken(UserAgentTreeWalkerParser.IN, 0); }
		public ITerminalNode VALUENAME() { return GetToken(UserAgentTreeWalkerParser.VALUENAME, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepIsInSetContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepIsInSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepIsInSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepIsInSet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepNext2Context : PathContext {
		public PathContext nextStep;
		public ITerminalNode NEXT2() { return GetToken(UserAgentTreeWalkerParser.NEXT2, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepNext2Context(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepNext2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepNext2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepNext2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepUpContext : PathContext {
		public PathContext nextStep;
		public ITerminalNode UP() { return GetToken(UserAgentTreeWalkerParser.UP, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepUpContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepUp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepUp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepUp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepEndsWithValueContext : PathContext {
		public IToken value;
		public PathContext nextStep;
		public ITerminalNode ENDSWITH() { return GetToken(UserAgentTreeWalkerParser.ENDSWITH, 0); }
		public ITerminalNode VALUE() { return GetToken(UserAgentTreeWalkerParser.VALUE, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepEndsWithValueContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepEndsWithValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepEndsWithValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepEndsWithValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepEqualsValueContext : PathContext {
		public IToken value;
		public PathContext nextStep;
		public ITerminalNode EQUALS() { return GetToken(UserAgentTreeWalkerParser.EQUALS, 0); }
		public ITerminalNode VALUE() { return GetToken(UserAgentTreeWalkerParser.VALUE, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepEqualsValueContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepEqualsValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepEqualsValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepEqualsValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepDownContext : PathContext {
		public IToken name;
		public PathContext nextStep;
		public ITerminalNode DOT() { return GetToken(UserAgentTreeWalkerParser.DOT, 0); }
		public NumberRangeContext numberRange() {
			return GetRuleContext<NumberRangeContext>(0);
		}
		public ITerminalNode PATHTOKENNAME() { return GetToken(UserAgentTreeWalkerParser.PATHTOKENNAME, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepDownContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepDown(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepDown(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepDown(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepWordRangeContext : PathContext {
		public PathContext nextStep;
		public WordRangeContext wordRange() {
			return GetRuleContext<WordRangeContext>(0);
		}
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepWordRangeContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepWordRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepWordRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepWordRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepNotEqualsValueContext : PathContext {
		public IToken value;
		public PathContext nextStep;
		public ITerminalNode NOTEQUALS() { return GetToken(UserAgentTreeWalkerParser.NOTEQUALS, 0); }
		public ITerminalNode VALUE() { return GetToken(UserAgentTreeWalkerParser.VALUE, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepNotEqualsValueContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepNotEqualsValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepNotEqualsValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepNotEqualsValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepBackToFullContext : PathContext {
		public PathContext nextStep;
		public ITerminalNode BACKTOFULL() { return GetToken(UserAgentTreeWalkerParser.BACKTOFULL, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepBackToFullContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepBackToFull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepBackToFull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepBackToFull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepPrevContext : PathContext {
		public PathContext nextStep;
		public ITerminalNode PREV() { return GetToken(UserAgentTreeWalkerParser.PREV, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepPrevContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepPrev(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepPrev(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepPrev(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepNextContext : PathContext {
		public PathContext nextStep;
		public ITerminalNode NEXT() { return GetToken(UserAgentTreeWalkerParser.NEXT, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepNextContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepNext(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepNext(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepNext(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StepContainsValueContext : PathContext {
		public IToken value;
		public PathContext nextStep;
		public ITerminalNode CONTAINS() { return GetToken(UserAgentTreeWalkerParser.CONTAINS, 0); }
		public ITerminalNode VALUE() { return GetToken(UserAgentTreeWalkerParser.VALUE, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public StepContainsValueContext(PathContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterStepContainsValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitStepContainsValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStepContainsValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		PathContext _localctx = new PathContext(Context, State);
		EnterRule(_localctx, 10, RULE_path);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				_localctx = new StepDownContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; Match(DOT);
				State = 119; numberRange();
				State = 120; ((StepDownContext)_localctx).name = Match(PATHTOKENNAME);
				State = 122;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 121; ((StepDownContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case UP:
				_localctx = new StepUpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; Match(UP);
				State = 126;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 125; ((StepUpContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case NEXT:
				_localctx = new StepNextContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 128; Match(NEXT);
				State = 130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 129; ((StepNextContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case NEXT2:
				_localctx = new StepNext2Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 132; Match(NEXT2);
				State = 134;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 133; ((StepNext2Context)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case NEXT3:
				_localctx = new StepNext3Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 136; Match(NEXT3);
				State = 138;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 137; ((StepNext3Context)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case NEXT4:
				_localctx = new StepNext4Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 140; Match(NEXT4);
				State = 142;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 141; ((StepNext4Context)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case PREV:
				_localctx = new StepPrevContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 144; Match(PREV);
				State = 146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 145; ((StepPrevContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case PREV2:
				_localctx = new StepPrev2Context(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 148; Match(PREV2);
				State = 150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 149; ((StepPrev2Context)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case PREV3:
				_localctx = new StepPrev3Context(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 152; Match(PREV3);
				State = 154;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 153; ((StepPrev3Context)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case PREV4:
				_localctx = new StepPrev4Context(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 156; Match(PREV4);
				State = 158;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 157; ((StepPrev4Context)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case EQUALS:
				_localctx = new StepEqualsValueContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 160; Match(EQUALS);
				State = 161; ((StepEqualsValueContext)_localctx).value = Match(VALUE);
				State = 163;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 162; ((StepEqualsValueContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case NOTEQUALS:
				_localctx = new StepNotEqualsValueContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 165; Match(NOTEQUALS);
				State = 166; ((StepNotEqualsValueContext)_localctx).value = Match(VALUE);
				State = 168;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 167; ((StepNotEqualsValueContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case STARTSWITH:
				_localctx = new StepStartsWithValueContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 170; Match(STARTSWITH);
				State = 171; ((StepStartsWithValueContext)_localctx).value = Match(VALUE);
				State = 173;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 172; ((StepStartsWithValueContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case ENDSWITH:
				_localctx = new StepEndsWithValueContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 175; Match(ENDSWITH);
				State = 176; ((StepEndsWithValueContext)_localctx).value = Match(VALUE);
				State = 178;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 177; ((StepEndsWithValueContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case CONTAINS:
				_localctx = new StepContainsValueContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 180; Match(CONTAINS);
				State = 181; ((StepContainsValueContext)_localctx).value = Match(VALUE);
				State = 183;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 182; ((StepContainsValueContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case IN:
				_localctx = new StepIsInSetContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 185; Match(IN);
				State = 186; ((StepIsInSetContext)_localctx).set = Match(VALUENAME);
				State = 188;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 187; ((StepIsInSetContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case BLOCKOPEN:
				_localctx = new StepWordRangeContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 190; wordRange();
				State = 192;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 191; ((StepWordRangeContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			case BACKTOFULL:
				_localctx = new StepBackToFullContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 194; Match(BACKTOFULL);
				State = 196;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 195; ((StepBackToFullContext)_localctx).nextStep = path();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberRangeContext : ParserRuleContext {
		public NumberRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberRange; } }
	 
		public NumberRangeContext() { }
		public virtual void CopyFrom(NumberRangeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberRangeAllContext : NumberRangeContext {
		public ITerminalNode BRACEOPEN() { return GetToken(UserAgentTreeWalkerParser.BRACEOPEN, 0); }
		public ITerminalNode STAR() { return GetToken(UserAgentTreeWalkerParser.STAR, 0); }
		public ITerminalNode BRACECLOSE() { return GetToken(UserAgentTreeWalkerParser.BRACECLOSE, 0); }
		public NumberRangeAllContext(NumberRangeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterNumberRangeAll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitNumberRangeAll(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberRangeAll(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberRangeSingleValueContext : NumberRangeContext {
		public IToken count;
		public ITerminalNode BRACEOPEN() { return GetToken(UserAgentTreeWalkerParser.BRACEOPEN, 0); }
		public ITerminalNode BRACECLOSE() { return GetToken(UserAgentTreeWalkerParser.BRACECLOSE, 0); }
		public ITerminalNode NUMBER() { return GetToken(UserAgentTreeWalkerParser.NUMBER, 0); }
		public NumberRangeSingleValueContext(NumberRangeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterNumberRangeSingleValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitNumberRangeSingleValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberRangeSingleValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberRangeStartToEndContext : NumberRangeContext {
		public IToken rangeStart;
		public IToken rangeEnd;
		public ITerminalNode BRACEOPEN() { return GetToken(UserAgentTreeWalkerParser.BRACEOPEN, 0); }
		public ITerminalNode MINUS() { return GetToken(UserAgentTreeWalkerParser.MINUS, 0); }
		public ITerminalNode BRACECLOSE() { return GetToken(UserAgentTreeWalkerParser.BRACECLOSE, 0); }
		public ITerminalNode[] NUMBER() { return GetTokens(UserAgentTreeWalkerParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(UserAgentTreeWalkerParser.NUMBER, i);
		}
		public NumberRangeStartToEndContext(NumberRangeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterNumberRangeStartToEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitNumberRangeStartToEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberRangeStartToEnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberRangeEmptyContext : NumberRangeContext {
		public NumberRangeEmptyContext(NumberRangeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterNumberRangeEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitNumberRangeEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberRangeEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberRangeOpenStartToEndContext : NumberRangeContext {
		public IToken rangeEnd;
		public ITerminalNode BRACEOPEN() { return GetToken(UserAgentTreeWalkerParser.BRACEOPEN, 0); }
		public ITerminalNode MINUS() { return GetToken(UserAgentTreeWalkerParser.MINUS, 0); }
		public ITerminalNode BRACECLOSE() { return GetToken(UserAgentTreeWalkerParser.BRACECLOSE, 0); }
		public ITerminalNode NUMBER() { return GetToken(UserAgentTreeWalkerParser.NUMBER, 0); }
		public NumberRangeOpenStartToEndContext(NumberRangeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterNumberRangeOpenStartToEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitNumberRangeOpenStartToEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberRangeOpenStartToEnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberRangeStartToOpenEndContext : NumberRangeContext {
		public IToken rangeStart;
		public ITerminalNode BRACEOPEN() { return GetToken(UserAgentTreeWalkerParser.BRACEOPEN, 0); }
		public ITerminalNode MINUS() { return GetToken(UserAgentTreeWalkerParser.MINUS, 0); }
		public ITerminalNode BRACECLOSE() { return GetToken(UserAgentTreeWalkerParser.BRACECLOSE, 0); }
		public ITerminalNode NUMBER() { return GetToken(UserAgentTreeWalkerParser.NUMBER, 0); }
		public NumberRangeStartToOpenEndContext(NumberRangeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterNumberRangeStartToOpenEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitNumberRangeStartToOpenEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberRangeStartToOpenEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberRangeContext numberRange() {
		NumberRangeContext _localctx = new NumberRangeContext(Context, State);
		EnterRule(_localctx, 12, RULE_numberRange);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				_localctx = new NumberRangeStartToEndContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 200; Match(BRACEOPEN);
				State = 201; ((NumberRangeStartToEndContext)_localctx).rangeStart = Match(NUMBER);
				State = 202; Match(MINUS);
				State = 203; ((NumberRangeStartToEndContext)_localctx).rangeEnd = Match(NUMBER);
				State = 204; Match(BRACECLOSE);
				}
				}
				break;
			case 2:
				_localctx = new NumberRangeOpenStartToEndContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 205; Match(BRACEOPEN);
				State = 206; Match(MINUS);
				State = 207; ((NumberRangeOpenStartToEndContext)_localctx).rangeEnd = Match(NUMBER);
				State = 208; Match(BRACECLOSE);
				}
				}
				break;
			case 3:
				_localctx = new NumberRangeStartToOpenEndContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 209; Match(BRACEOPEN);
				State = 210; ((NumberRangeStartToOpenEndContext)_localctx).rangeStart = Match(NUMBER);
				State = 211; Match(MINUS);
				State = 212; Match(BRACECLOSE);
				}
				}
				break;
			case 4:
				_localctx = new NumberRangeSingleValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 213; Match(BRACEOPEN);
				State = 214; ((NumberRangeSingleValueContext)_localctx).count = Match(NUMBER);
				State = 215; Match(BRACECLOSE);
				}
				}
				break;
			case 5:
				_localctx = new NumberRangeAllContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 216; Match(BRACEOPEN);
				State = 217; Match(STAR);
				State = 218; Match(BRACECLOSE);
				}
				}
				break;
			case 6:
				_localctx = new NumberRangeEmptyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				{
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordRangeContext : ParserRuleContext {
		public WordRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordRange; } }
	 
		public WordRangeContext() { }
		public virtual void CopyFrom(WordRangeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WordRangeFirstWordsContext : WordRangeContext {
		public IToken lastWord;
		public ITerminalNode BLOCKOPEN() { return GetToken(UserAgentTreeWalkerParser.BLOCKOPEN, 0); }
		public ITerminalNode MINUS() { return GetToken(UserAgentTreeWalkerParser.MINUS, 0); }
		public ITerminalNode BLOCKCLOSE() { return GetToken(UserAgentTreeWalkerParser.BLOCKCLOSE, 0); }
		public ITerminalNode NUMBER() { return GetToken(UserAgentTreeWalkerParser.NUMBER, 0); }
		public WordRangeFirstWordsContext(WordRangeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterWordRangeFirstWords(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitWordRangeFirstWords(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordRangeFirstWords(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WordRangeLastWordsContext : WordRangeContext {
		public IToken firstWord;
		public ITerminalNode BLOCKOPEN() { return GetToken(UserAgentTreeWalkerParser.BLOCKOPEN, 0); }
		public ITerminalNode MINUS() { return GetToken(UserAgentTreeWalkerParser.MINUS, 0); }
		public ITerminalNode BLOCKCLOSE() { return GetToken(UserAgentTreeWalkerParser.BLOCKCLOSE, 0); }
		public ITerminalNode NUMBER() { return GetToken(UserAgentTreeWalkerParser.NUMBER, 0); }
		public WordRangeLastWordsContext(WordRangeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterWordRangeLastWords(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitWordRangeLastWords(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordRangeLastWords(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WordRangeStartToEndContext : WordRangeContext {
		public IToken firstWord;
		public IToken lastWord;
		public ITerminalNode BLOCKOPEN() { return GetToken(UserAgentTreeWalkerParser.BLOCKOPEN, 0); }
		public ITerminalNode MINUS() { return GetToken(UserAgentTreeWalkerParser.MINUS, 0); }
		public ITerminalNode BLOCKCLOSE() { return GetToken(UserAgentTreeWalkerParser.BLOCKCLOSE, 0); }
		public ITerminalNode[] NUMBER() { return GetTokens(UserAgentTreeWalkerParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(UserAgentTreeWalkerParser.NUMBER, i);
		}
		public WordRangeStartToEndContext(WordRangeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterWordRangeStartToEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitWordRangeStartToEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordRangeStartToEnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WordRangeSingleWordContext : WordRangeContext {
		public IToken singleWord;
		public ITerminalNode BLOCKOPEN() { return GetToken(UserAgentTreeWalkerParser.BLOCKOPEN, 0); }
		public ITerminalNode BLOCKCLOSE() { return GetToken(UserAgentTreeWalkerParser.BLOCKCLOSE, 0); }
		public ITerminalNode NUMBER() { return GetToken(UserAgentTreeWalkerParser.NUMBER, 0); }
		public WordRangeSingleWordContext(WordRangeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.EnterWordRangeSingleWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IUserAgentTreeWalkerListener typedListener = listener as IUserAgentTreeWalkerListener;
			if (typedListener != null) typedListener.ExitWordRangeSingleWord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IUserAgentTreeWalkerVisitor<TResult> typedVisitor = visitor as IUserAgentTreeWalkerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordRangeSingleWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordRangeContext wordRange() {
		WordRangeContext _localctx = new WordRangeContext(Context, State);
		EnterRule(_localctx, 14, RULE_wordRange);
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				_localctx = new WordRangeStartToEndContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 222; Match(BLOCKOPEN);
				State = 223; ((WordRangeStartToEndContext)_localctx).firstWord = Match(NUMBER);
				State = 224; Match(MINUS);
				State = 225; ((WordRangeStartToEndContext)_localctx).lastWord = Match(NUMBER);
				State = 226; Match(BLOCKCLOSE);
				}
				}
				break;
			case 2:
				_localctx = new WordRangeFirstWordsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 227; Match(BLOCKOPEN);
				State = 228; Match(MINUS);
				State = 229; ((WordRangeFirstWordsContext)_localctx).lastWord = Match(NUMBER);
				State = 230; Match(BLOCKCLOSE);
				}
				}
				break;
			case 3:
				_localctx = new WordRangeLastWordsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 231; Match(BLOCKOPEN);
				State = 232; ((WordRangeLastWordsContext)_localctx).firstWord = Match(NUMBER);
				State = 233; Match(MINUS);
				State = 234; Match(BLOCKCLOSE);
				}
				}
				break;
			case 4:
				_localctx = new WordRangeSingleWordContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 235; Match(BLOCKOPEN);
				State = 236; ((WordRangeSingleWordContext)_localctx).singleWord = Match(NUMBER);
				State = 237; Match(BLOCKCLOSE);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return matcher_sempred((MatcherContext)_localctx, predIndex);
		}
		return true;
	}
	private bool matcher_sempred(MatcherContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ')', '\xF3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x1C', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', 'N', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'Y', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x64', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'h', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', 'k', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'q', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'u', '\n', '\x6', '\x5', '\x6', 'w', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '}', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x81', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x85', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x89', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x8D', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x91', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x95', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x99', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x9D', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xA1', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xA6', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xAB', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xB0', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xB5', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xBA', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xBF', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\xC3', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xC7', 
		'\n', '\a', '\x5', '\a', '\xC9', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '\xDF', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xF1', '\n', 
		'\t', '\x3', '\t', '\x2', '\x3', '\b', '\n', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x2', '\x2', '\x2', '\x125', '\x2', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x6', ' ', '\x3', '\x2', '\x2', '\x2', '\b', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'v', '\x3', '\x2', '\x2', '\x2', '\f', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\xDE', '\x3', '\x2', '\x2', '\x2', '\x10', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x5', '\b', '\x5', '\x2', 
		'\x13', '\x14', '\a', '\x2', '\x2', '\x3', '\x14', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '\x16', '\a', '\x3', '\x2', '\x2', '\x16', '\x17', 
		'\a', '\x1C', '\x2', '\x2', '\x17', '\x18', '\x5', '\b', '\x5', '\x2', 
		'\x18', '\x19', '\a', '\x1D', '\x2', '\x2', '\x19', '\x1A', '\a', '\x2', 
		'\x2', '\x3', '\x1A', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x5', '\b', 
		'\x5', '\x2', '\x1E', '\x1F', '\a', '\x2', '\x2', '\x3', '\x1F', '\x5', 
		'\x3', '\x2', '\x2', '\x2', ' ', '!', '\x5', '\b', '\x5', '\x2', '!', 
		'\"', '\a', '\x2', '\x2', '\x3', '\"', '\a', '\x3', '\x2', '\x2', '\x2', 
		'#', '$', '\b', '\x5', '\x1', '\x2', '$', '\x64', '\x5', '\n', '\x6', 
		'\x2', '%', '&', '\a', '\x4', '\x2', '\x2', '&', '\'', '\a', '\x1C', '\x2', 
		'\x2', '\'', '(', '\a', '\r', '\x2', '\x2', '(', ')', '\a', '\"', '\x2', 
		'\x2', ')', '*', '\x5', '\b', '\x5', '\x2', '*', '+', '\a', '\"', '\x2', 
		'\x2', '+', ',', '\a', '\r', '\x2', '\x2', ',', '-', '\a', '\x1D', '\x2', 
		'\x2', '-', '\x64', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\x4', 
		'\x2', '\x2', '/', '\x30', '\a', '\x1C', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\r', '\x2', '\x2', '\x31', '\x32', '\a', '\"', '\x2', '\x2', '\x32', 
		'\x33', '\x5', '\b', '\x5', '\x2', '\x33', '\x34', '\a', '\x1D', '\x2', 
		'\x2', '\x34', '\x64', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', 
		'\x4', '\x2', '\x2', '\x36', '\x37', '\a', '\x1C', '\x2', '\x2', '\x37', 
		'\x38', '\x5', '\b', '\x5', '\x2', '\x38', '\x39', '\a', '\"', '\x2', 
		'\x2', '\x39', ':', '\a', '\r', '\x2', '\x2', ':', ';', '\a', '\x1D', 
		'\x2', '\x2', ';', '\x64', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', 
		'\x5', '\x2', '\x2', '=', '>', '\a', '\x1C', '\x2', '\x2', '>', '?', '\x5', 
		'\b', '\x5', '\x2', '?', '@', '\a', '\x1D', '\x2', '\x2', '@', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x6', '\x2', '\x2', 
		'\x42', '\x43', '\a', '\x1C', '\x2', '\x2', '\x43', '\x44', '\x5', '\b', 
		'\x5', '\x2', '\x44', '\x45', '\a', '\x1D', '\x2', '\x2', '\x45', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', '\a', '\x2', '\x2', 'G', 
		'H', '\a', '\x1C', '\x2', '\x2', 'H', 'I', '\a', '\f', '\x2', '\x2', 'I', 
		'J', '\a', '\"', '\x2', '\x2', 'J', 'M', '\x5', '\b', '\x5', '\x2', 'K', 
		'L', '\a', '\"', '\x2', '\x2', 'L', 'N', '\a', '\r', '\x2', '\x2', 'M', 
		'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\x1D', '\x2', '\x2', 
		'P', '\x64', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '\b', '\x2', 
		'\x2', 'R', 'S', '\a', '\x1C', '\x2', '\x2', 'S', 'T', '\a', '\f', '\x2', 
		'\x2', 'T', 'U', '\a', '\"', '\x2', '\x2', 'U', 'X', '\x5', '\b', '\x5', 
		'\x2', 'V', 'W', '\a', '\"', '\x2', '\x2', 'W', 'Y', '\a', '\r', '\x2', 
		'\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x1D', '\x2', 
		'\x2', '[', '\x64', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '\t', 
		'\x2', '\x2', ']', '^', '\a', '\x1C', '\x2', '\x2', '^', '_', '\a', '\f', 
		'\x2', '\x2', '_', '`', '\a', '\"', '\x2', '\x2', '`', '\x61', '\x5', 
		'\b', '\x5', '\x2', '\x61', '\x62', '\a', '\x1D', '\x2', '\x2', '\x62', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x63', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '%', '\x3', '\x2', '\x2', '\x2', '\x63', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x35', '\x3', '\x2', '\x2', '\x2', '\x63', '<', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x46', '\x3', '\x2', '\x2', '\x2', '\x63', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\\', '\x3', '\x2', '\x2', '\x2', '\x64', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x66', '\f', '\x3', '\x2', '\x2', '\x66', 
		'h', '\x5', '\x10', '\t', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'w', '\a', '\r', '\x2', 
		'\x2', 'm', 'n', '\a', ')', '\x2', '\x2', 'n', 'p', '\a', '\f', '\x2', 
		'\x2', 'o', 'q', '\x5', '\f', '\a', '\x2', 'p', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'r', 't', '\a', '\n', '\x2', '\x2', 's', 'u', '\x5', '\f', '\a', 
		'\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'w', '\x3', '\x2', '\x2', '\x2', 'v', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'm', '\x3', '\x2', '\x2', '\x2', 'v', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'w', '\v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\x17', 
		'\x2', '\x2', 'y', 'z', '\x5', '\xE', '\b', '\x2', 'z', '|', '\a', '\v', 
		'\x2', '\x2', '{', '}', '\x5', '\f', '\a', '\x2', '|', '{', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x80', '\a', '\xE', '\x2', '\x2', '\x7F', '\x81', 
		'\x5', '\f', '\a', '\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x84', '\a', '\xF', '\x2', '\x2', '\x83', '\x85', 
		'\x5', '\f', '\a', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x88', '\a', '\x10', '\x2', '\x2', '\x87', '\x89', 
		'\x5', '\f', '\a', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8C', '\a', '\x11', '\x2', '\x2', '\x8B', '\x8D', 
		'\x5', '\f', '\a', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x90', '\a', '\x12', '\x2', '\x2', '\x8F', '\x91', 
		'\x5', '\f', '\a', '\x2', '\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x94', '\a', '\x13', '\x2', '\x2', '\x93', '\x95', 
		'\x5', '\f', '\a', '\x2', '\x94', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x98', '\a', '\x14', '\x2', '\x2', '\x97', '\x99', 
		'\x5', '\f', '\a', '\x2', '\x98', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x9C', '\a', '\x15', '\x2', '\x2', '\x9B', '\x9D', 
		'\x5', '\f', '\a', '\x2', '\x9C', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\xA0', '\a', '\x16', '\x2', '\x2', '\x9F', '\xA1', 
		'\x5', '\f', '\a', '\x2', '\xA0', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\xA3', '\a', '%', '\x2', '\x2', '\xA3', '\xA5', 
		'\a', '\r', '\x2', '\x2', '\xA4', '\xA6', '\x5', '\f', '\a', '\x2', '\xA5', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', 
		'$', '\x2', '\x2', '\xA8', '\xAA', '\a', '\r', '\x2', '\x2', '\xA9', '\xAB', 
		'\x5', '\f', '\a', '\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xAD', '\a', '\'', '\x2', '\x2', '\xAD', '\xAF', 
		'\a', '\r', '\x2', '\x2', '\xAE', '\xB0', '\x5', '\f', '\a', '\x2', '\xAF', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\a', 
		'(', '\x2', '\x2', '\xB2', '\xB4', '\a', '\r', '\x2', '\x2', '\xB3', '\xB5', 
		'\x5', '\f', '\a', '\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\xB7', '\a', '&', '\x2', '\x2', '\xB7', '\xB9', 
		'\a', '\r', '\x2', '\x2', '\xB8', '\xBA', '\x5', '\f', '\a', '\x2', '\xB9', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\a', 
		'\x1A', '\x2', '\x2', '\xBC', '\xBE', '\a', '\f', '\x2', '\x2', '\xBD', 
		'\xBF', '\x5', '\f', '\a', '\x2', '\xBE', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC2', '\x5', '\x10', '\t', '\x2', '\xC1', 
		'\xC3', '\x5', '\f', '\a', '\x2', '\xC2', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC6', '\a', ')', '\x2', '\x2', '\xC5', 
		'\xC7', '\x5', '\f', '\a', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', 'x', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'~', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\x86', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\x8E', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\r', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\a', 
		'\x1E', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x1B', '\x2', '\x2', '\xCC', 
		'\xCD', '\a', '\x18', '\x2', '\x2', '\xCD', '\xCE', '\a', '\x1B', '\x2', 
		'\x2', '\xCE', '\xDF', '\a', '\x1F', '\x2', '\x2', '\xCF', '\xD0', '\a', 
		'\x1E', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x18', '\x2', '\x2', '\xD1', 
		'\xD2', '\a', '\x1B', '\x2', '\x2', '\xD2', '\xDF', '\a', '\x1F', '\x2', 
		'\x2', '\xD3', '\xD4', '\a', '\x1E', '\x2', '\x2', '\xD4', '\xD5', '\a', 
		'\x1B', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x18', '\x2', '\x2', '\xD6', 
		'\xDF', '\a', '\x1F', '\x2', '\x2', '\xD7', '\xD8', '\a', '\x1E', '\x2', 
		'\x2', '\xD8', '\xD9', '\a', '\x1B', '\x2', '\x2', '\xD9', '\xDF', '\a', 
		'\x1F', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x1E', '\x2', '\x2', '\xDB', 
		'\xDC', '\a', '\x19', '\x2', '\x2', '\xDC', '\xDF', '\a', '\x1F', '\x2', 
		'\x2', '\xDD', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xF', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xE1', '\a', '\x1C', '\x2', '\x2', '\xE1', '\xE2', '\a', '\x1B', '\x2', 
		'\x2', '\xE2', '\xE3', '\a', '\x18', '\x2', '\x2', '\xE3', '\xE4', '\a', 
		'\x1B', '\x2', '\x2', '\xE4', '\xF1', '\a', '\x1D', '\x2', '\x2', '\xE5', 
		'\xE6', '\a', '\x1C', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x18', '\x2', 
		'\x2', '\xE7', '\xE8', '\a', '\x1B', '\x2', '\x2', '\xE8', '\xF1', '\a', 
		'\x1D', '\x2', '\x2', '\xE9', '\xEA', '\a', '\x1C', '\x2', '\x2', '\xEA', 
		'\xEB', '\a', '\x1B', '\x2', '\x2', '\xEB', '\xEC', '\a', '\x18', '\x2', 
		'\x2', '\xEC', '\xF1', '\a', '\x1D', '\x2', '\x2', '\xED', '\xEE', '\a', 
		'\x1C', '\x2', '\x2', '\xEE', '\xEF', '\a', '\x1B', '\x2', '\x2', '\xEF', 
		'\xF1', '\a', '\x1D', '\x2', '\x2', '\xF0', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xED', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1B', 'M', 'X', '\x63', 
		'i', 'p', 't', 'v', '|', '\x80', '\x84', '\x88', '\x8C', '\x90', '\x94', 
		'\x98', '\x9C', '\xA0', '\xA5', '\xAA', '\xAF', '\xB4', '\xB9', '\xBE', 
		'\xC2', '\xC6', '\xC8', '\xDE', '\xF0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace OrbintSoft.Yauaa.Antlr4Source
